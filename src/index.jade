mixin feature(title, icon, text)
  div(block='feature')
    div(elem='content')
      span(elem='icon', class='glyphicon glyphicon-#{icon}')
      div(elem='title') #{title}
      div(elem='text') #{text}
      
doctype html
html
  head(lang="en")
    title Diy — Javascript that compiles to a Makefile
    meta(http-equiv="content-type", content="text/html; charset=UTF-8")
    meta(name="description", content="")
    meta(name="keywords", content="")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;")
    script(type="text/javascript", src="client.js")
    // if lt IE 9
      script(type="text/javascript", src="js/html5shiv.js")
  body
    a(href="https://github.com/vzaccaria/diy")
      img(style="position: absolute; top: 0; left: 0; border: 0;", 
        src="https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67",
        alt="Fork me on GitHub", data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png") 

    div(block='page')
      div(block='intro')
        img(elem='logo', src='images/drill.png')
        div(elem='title') Diy
        div(elem='subtitle') Javascript that compiles to a Makefile
        div(block='paragraph', mod='position:intro')
          :markdown
            # [read the docs](docs/index.html)
            
        div(block='hr')

      div(block='content')
        div(elem="title", mod="role:feature-list-title") features
        +feature('build systems dsl',                          'pencil',    'Diy is a build language embedded in Javascript. It allows to generate Make files for your web site or web app.')
        +feature('tailored for web',                           'flash',     'All classic transforms are supported such as reductions (e.g., concatenation), post-processing (e.g., minification) and so on..')
        +feature('parallel builds',                            'tasks',     'Enables Make to exploit available parallelism.')
        +feature('incremental builds',                         'forward',   'Compile only what has changed.')
        +feature('"do it yourself" customization',             'wrench',    'Specify directly how build tools should be invoked on the command line.')
        +feature('library of transforms',                      'briefcase',  'Diy comes with a library of transforms already baked in.')
          
      
      div(block='content')
        div(block='hr')
        div(block='paragraph', mod='width:large')
            :markdown
              # install 
              
              ```shell
              npm install diy 
              ```
              
              # example 
              ## concatenate and minify javascript files

              Assume you have two files (`src/file1.js` and `src/file2.js`) that you want to 
              concatenate and minify into a single `_site/client.js` file. Here's how you'd
              write a Diy (ES6) program for this task:
            
              ## diy source file
              
              ```js
              /* configure.js */
              
              var {
                generateProject
              } = require("diy");

              generateProject(_ => {
                _.collect("all", _ => {
                  _.toFile( "_site/client.js", _ => {
                    _.minify( _ => {
                      _.concat( _ => {
                        _.copy("src/*.js")
                      })
                    })
                  })
                })
              })
              ```
              
              ## description
              
              Everything starts with the `generateProject` library function. You invoke it with 
              a closure that describes the final makefile targets (using `_.collect`). A target is just a name
              you give to a set of products you want to build. 
                          
              `_.toFile` creates a named file whose contents are created as described by the closure passed as second parameter. 
              The closure (as it can be intuitively understood) minifies the concatenation of a copy of javascript files in `src/*.js`.
                
            
                
              To generate the makefile we use babel to get ES5:
              
              ```bash
              babel configure.js | node
              ```
              
              And here's the [generated makefile](demo/makefile).
              
              The makefile comes with two default targets (`prepare` and `clean`) plus all the targets defined with `collect`:
              
              ```bash
              > make prepare      # Creates destination directories
              > make clean        # Removes all products
              > make all          # Execute commands associated with `all`
              ```
              
              Make provides a way to specify the maximum parallelism to be used for building targets:
              
              ```bash
              > make all -j 8     # Build all, execute up to 8 concurrent commands. 
              ```
              
              
              
              # customization
              
              What about your favorite css/js preprocessor and other minifiers?
              
              Here's how you would define a new processing step to compile javascript with a
              bunch of browserify plugins: 

              ```js
              _.browserify = (src, ...deps) => {
                var command = (_) => `./node_modules/.bin/browserify -t liveify -t node-lessify  ${_.source} -o ${_.product}`
                var product = (_) => `${_.source.replace(/\..*/, '.bfd.js')}`
                _.compileFiles(...([ command, product, src ].concat(deps)))
              }
              ```
              
              `_.compileFiles` is a built in function to easily construct new processing steps. Its first
              two parameters are two templates: 
              
              1. a function to build the command line 
              2. a function to build the product name
              
              The remaining parameters are `src` (glob for the source files) and the source dependencies.
              
              ```js
              generateProject(_ => {

                _.browserify = (dir, ...deps) => {
                  var command = (_) => `./node_modules/.bin/browserify -t liveify -t node-lessify  ${_.source} -o ${_.product}`
                  var product = (_) => `${_.source.replace(/\..*/, '.bfd.js')}`
                  _.compileFiles(...([ command, product, dir ].concat(deps)))
                }

                _.collect("all", _ => {
                  _.toFile( "_site/client.js", _ => {
                      _.browserify("src/index.ls", "src/**/*.less", "src/**/*.ls")
                  })
                })
              }
              ```
              
              # serving and livereloading
              
              Serving static files from a directory and livereloading upon a change of a product is supported through `pm2` and `tiny-lr`. We can
              create two make targets (`start` and `stop`) that take care of starting and stopping both services:
              
              ```js
              generateProject(_ => { 
              
                  /* ... */
              
                _.collect("start", _ => {
                  _.startWatch("_site/**/*")
                  _.startServe("_site")
                })
                
                _.collect("stop", _ => {
                  _.stopWatch()
                  _.stopServe()
                })
                
                  /* ... */
              })
              ```
              
              `_.startWatch(glob)` is a built-in step that launches a tiny-lr instance that triggers a reload upon change on files matching the glob. 
              `_.startServe(root,port)` serves files from the specified root and port.

  
    footer(block='footer')
      div(block='content', mod='position:footer') 
        div(block='paragraph', mod='position:footer')
          :markdown
            ## [© vittorio zaccaria, 2015](http://www.vittoriozaccaria.net/v2/)
      
        div(block='paragraph', mod='role:share')
          #indiesocial-init(data-indieSocialServices="all", 
                            data-addFontelloIcon="true", 
                            data-URL="https://github.com/vzaccaria/diy", 
                            data-title="Diy — Javascript that compiles to a Makefile")
                        



    script(type="text/javascript").
      document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js"></' + 'script>')

    // if IE
      script(type="text/javascript", src="js/placeholder.js")
